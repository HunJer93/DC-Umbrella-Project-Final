{"version":3,"sources":["images/filler.jpg","components/Navbar.js","components/TestHomePage.js","components/GraphPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","src","width","height","alt","TestHomePage","navigate","useNavigate","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","numTweets","setNumTweets","handleSubmit","event","preventDefault","payload","method","headers","Content-Type","body","JSON","stringify","fetch","then","Response","console","log","catch","error","alert","concat","Fragment","components_Navbar","onSubmit","type","name","placeholder","onChange","target","value","onClick","id","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","GraphPage","App","require","reportWebVitals","onPerfEntry","Function","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_router_dom","react_router","path","element","src_App","components_TestHomePage","components_GraphPage","index","style","padding"],"mappings":"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","file":"static/js/main.871c13d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/filler.83d672b5.jpg\";","import React from \"react\";\r\n  \r\nfunction Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <img\r\n                    src=\r\n                    \"https://media.giphy.com/media/MNa0HKdhc3SGQ/giphy.gif\"\r\n                    width=\"75\"\r\n                    height=\"75\"\r\n                    className=\"d-inline-block align-top logo\"\r\n                    alt=\"\"\r\n                />\r\n            </nav>\r\n            <h1 className=\"display-4 font-weight-bold\">Poll the Room</h1>\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default Navbar;","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport Navbar from './Navbar';\r\n\r\nfunction TestHomePage() {\r\n    const navigate = useNavigate()\r\n    const [query, setQuery] = useState('')\r\n    const [numTweets, setNumTweets] = useState('')\r\n\r\n\r\n    const handleQueryChange = event => {\r\n      setQuery(event.target.value)\r\n    }\r\n\r\n    const handleNumTweetsChange = event => {\r\n      setNumTweets(event.target.value)\r\n    }\r\n\r\n    const handleSubmit = event =>{\r\n      event.preventDefault();\r\n\r\n      //need to change the url\r\n      const url = 'localhost:3000/filler'\r\n      const payload = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ query, numTweets })\r\n      };\r\n\r\n      fetch(url, payload)\r\n        .then(Response = console.log('Submitted successfully'))\r\n        .catch(error => console.log('Form submit error', error))\r\n\r\n      //used to navigate pages\r\n      navigate('/graphPage')\r\n    \r\n      //handle the payload\r\n      alert(`Your state values: \\n\r\n              query: ${query} \\n\r\n              numTweets: ${numTweets}`)\r\n    }\r\n  return (\r\n    <>\r\n    <Navbar />\r\n    <div className=\"jumbotron text-center\">\r\n      {/* start of create query */}\r\n    <hr className=\"my-4\" />\r\n          <h2 className='display-5'>Create Your Query Here</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <p className='font-weight-light'>\r\n                Enter your query here. Please keep your query under 500 words or else it can't be processed!\r\n                <br />\r\n                <label className=\"font-weight-bold\">Query </label>\r\n                <br/>\r\n                <input \r\n                  type=\"query\"\r\n                  name=\"query\"\r\n                  placeholder=\"Enter your search here...\"\r\n                  onChange={handleQueryChange}\r\n                  value={query}\r\n                />\r\n                <p>Please enter a number of Tweets up to 5000</p>\r\n                <label className=\"font-weight-bold\"># of Tweets </label>\r\n                <br/>\r\n                <input \r\n                  type=\"numTweets\"\r\n                  name=\"numTweets\"\r\n                  placeholder=\"Enter # of Tweets here...\"\r\n                  onChange={handleNumTweetsChange}\r\n                  value={numTweets}\r\n                />\r\n                <br />\r\n                <br />\r\n                <button className='btn btn-success font-weight-bold' onClick={() => handleSubmit()}\r\n                        >Start Search\r\n                </button>\r\n            </p>\r\n          </form> \r\n          {/* end of create query */}\r\n    <div id=\"accordion\">\r\n      <div className=\"card\">\r\n        <div className=\"card-header\" id=\"headingOne\">\r\n          <h5 className=\"mb-0\">\r\n            <button className=\"btn btn-outline-info btn-lg btn-block\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n              How Does it Work?\r\n            </button>\r\n          </h5>\r\n        </div>\r\n        <div id=\"collapseOne\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\r\n          <div className=\"card-body\">\r\n            <p className=\"lead\">\r\n                Welcome to Poll the Room! Please enter the Twitter query you would like sentiment analysis on. \r\n                If you have multiple queries or hashtags you would like to research, please separate them with a \r\n                comma. \r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>  \r\n    </>  \r\n  )\r\n}\r\n\r\nexport default TestHomePage","import React from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport Navbar from './Navbar';\r\n\r\nfunction GraphPage() {\r\n    const navigate = useNavigate()\r\n  return (\r\n    <>\r\n    <Navbar />\r\n        <div className='card'>\r\n            <h1>Search Results</h1>\r\n            <ul className=\"list-group list-group-flush\">\r\n                <li className='list-group-item'>\r\n                    Sentiment Analysis\r\n                </li>\r\n                <li className='list-group-item'>\r\n                    Sentiment with Retweet Weight\r\n                </li>\r\n                <li className='list-group-item'>\r\n                    Wordcloud\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <button className=\"btn btn-success\" onClick={() => navigate('/')}>\r\n            Return Home\r\n        </button> |{\" \"}\r\n        <button className=\"btn btn-success\" onClick={() => navigate('/homepage')}>\r\n            Start Another Query\r\n        </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GraphPage","import React from 'react';\nimport { Outlet,Link, useNavigate } from \"react-router-dom\";\nimport './App.css';\nimport Homepage from './components/TestHomePage';\nimport GraphPage from './components/GraphPage';\nimport Navbar from './components/Navbar';\nimport TestHomePage from './components/TestHomePage';\n\nfunction App() {\n  const navigate = useNavigate()\n  return (\n    <div>\n      <Navbar />\n      <div>\n        <img src={require('./images/filler.jpg')} width={200} height={200} />\n      </div>\n      <br/>\n      <button className=\"btn btn-success\" onClick={() => navigate('/homepage')}>\n            Start A Query\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport {\n    BrowserRouter,\n    Routes,\n    Route\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport TestHomePage from './components/TestHomePage';\nimport GraphPage from './components/GraphPage';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n        <Route path=\"homepage\" element={<TestHomePage />} />\n        <Route path=\"graphPage\" element={<GraphPage />} />\n        <Route\n        index\n        element={<App /> } />\n        <Route\n      path=\"*\"\n      element={\n        <main style={{ padding: \"1rem\" }}>\n          <p>Oops! Something went wrong. There's nothing here!</p>\n        </main>\n      }\n    />\n    </Routes>\n  </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}